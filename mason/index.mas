 
<%args>
$input_gene => ()
</%args>

 <form id="form" class="form-horizontal">
        <div class="form-group">
          
          <div >  
            <label>Map</label> 
            <select id="mapId" name="mapId">
              <option ><-----Select---></option>
              <option value="S2">Cassava</option>
              <option value="S1">Cass</option>
            </select>
             <br>

             <a id="submit" class="btn btn-primary" href="#" onclick="selectMap(document.getElementById('mapId').value,'','');">Submit</a>
            </div>
            </div>
            
       <script type="text/javascript">
         function selectFunction() {           
           document.getElementById('submit1').className = "btn btn-primary";     
           document.getElementById('submit2').className = "btn btn-primary";     
        };        
      </script>
    </form>
  <!--<svg id="mainSVG" width="1000" height="750">-->
<div id="container" class="svg-container">
    <polygon id="poligono" points="" style="fill:none; stroke:#003300; stroke-width:3;"></polygon>
</div>
 <!-- </svg>-->
  <a id="submitchr" class="btn btn-primary" href="#" onclick="selectMap(document.getElementById('mapId').value,list);">Compare</a>



<script>

 var width = parseInt(d3.select('div#container').style('width'), 10);

 var svg = d3.select("div#container").append("svg")
  .attr("width", "100%")
  .attr("height", "100%")
  .attr("viewBox", "0 0 " + (width - 10) + " " + (width / 2 + 10))
  .attr("preserveAspectRatio", "xMinYMid meet")
  .attr("id", "matrixSVG");

 svg.select("#brushid").remove();

var isLinear = 1 ;

 var chrWdt = 25,
  chrHgt = 150, //radius * Math.sin(radians(ang/2)),
  chrHgtZoom = chrHgt + chrWdt * 2;

 var y0 = 0;

 var y1 = d3.scaleLinear().range([0, chrHgt]);
 var y2 = d3.scaleLinear().range([-chrWdt, chrHgt + chrWdt]); //  var y2 = d3.scaleLinear().range([-chrWdt, chrHgtZoom - chrWdt]); // Use "-chwidth" to draw circles in the borders
 var yAxis =  d3.axisLeft(y1).tickSize(2).ticks(5).tickFormat(d3.format(".0s"));
  var yAxisZoom =  d3.axisLeft(y2).tickSize(2).ticks(5).tickFormat(d3.format(".0s"));

   var   vbrush = d3.brushY()
              .extent([[0, 0], [chrWdt, chrHgt]])
              .on("brush", brush);  

function selectMap(value, list) {

  svg.selectAll("*").remove();

  var request = new XMLHttpRequest();

  request.open('GET', 'http://192.168.1.180:3100/brapi/v1/sgn_maps/9/positions?pageSize=10000000'); 

  request.onreadystatechange = function() {

    if (this.readyState === 4) {

      var myArr = JSON.parse(this.responseText);
      var result = fillArray(myArr);
      var data = result.data;
      var list = unique(result.list);

      var forZoom = 0;

      // Setting layout
      var radius = width / (list.length + 2);

      for (var i = 0; i < list.length; i++) {

        // Filter data by chr;
        var dataByChr = data.filter(function(d) {
          return d.linkageGroup == list[i]
        });

        // Draw each chr
        chromosome(dataByChr, svg, chrWdt, chrHgt, 0, radius * i, y0, list[i], 0,isLinear,5);

        // We don't need to draw links in the linear graph for now
        /*   if (i<n){
                var datali = datal.filter(function(d) { return d.chrs == i }); 
                links  (datali, svg, originX, originY,0, chrWdt, chrHgt, 0 ,radius * i +chrWdt, radius * (i+1) , y0); } */
      }

    }

  }

request.send();
};

</script>

<form id="search_gene" method="post" enctype="multipart/form-data" action="/Map/view_chr">
          <input class="form-control col-xs-2 panel-primary" value="<% $input_gene %>" name="input_gene"/>


</form>


