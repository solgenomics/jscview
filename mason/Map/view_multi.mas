<%args>
$input_chr => ()
$host => ()

</%args>


<& ../site/header.mas &>
<style type="text/css">
  path {
  fill:none;
  /*stroke:black;*/
}
</style>
<main role="main" class="container">
<br><br><br><br>

 <h3 align="center">Tomato-EXPIMP 2001  & Tomato-EXPEN 2000</h3> 

 <form id="form" class="form-horizontal">
      
           
       <script type="text/javascript">
         function selectFunction() {           
           document.getElementById('submit1').className = "btn btn-primary";     
           document.getElementById('submit2').className = "btn btn-primary";     
        };        
      </script>
    </form>
<br>
<br>
<div id="container" class="svg-container">
    <polygon id="poligono" points="" style="fill:none; stroke:#003300; stroke-width:3;"></polygon>
</div>

 <script>

   const width = 800,
       height = 800, 
       isLinear = 0;
   const host = '<% $host %>';
   const n=5, 
         nm= n+4 ; // # de chr added to not start from 0 grades 

   
   var svg = d3.select("div#container").append("svg")
              .attr("class", "svg-content")
              .attr("viewBox", "0 0 " + width + " " + height ) 
              .attr("preserveAspectRatio", "xMinYMid meet")
              .attr("id", "matrixSVG");


   svg.select("#brushid").remove();


   // Setting Global variables
   const radius = width /3 ,
       chrWdt = (radius / (n*1.6) > 40) ? 40: radius / (n*1.6)  ,
       chrHgt = radius * Math.sin(radians(180 / (nm)))-2.5*(radius/(nm)); 
  
   var y0 = radius * 0.5; 
   var y1 = d3.scaleLinear().range([-(chrWdt+chrHgt)/2, (chrWdt + chrHgt)/2]);
   var y2 = d3.scaleLinear().range([-chrWdt-chrHgt/2, chrWdt + chrHgt/2]); // Use - chwidth to draw circles in the borders
   var yAxis = d3.axisRight(y1).tickSize(3).ticks(10).tickFormat(d3.format(".2s"));
   var yAxisZoom = d3.axisLeft(y2).tickSize(3).ticks(10).tickFormat(d3.format(".2s"));
   var yAxisL =  d3.axisLeft(y1).tickSize(2).ticks(10);//.tickFormat(d3.format(".2s"));
   var yAxisR =  d3.axisRight(y1).tickSize(2).ticks(10);//.tickFormat(d3.format(".2s"));
   var yAxisZoomR =  d3.axisRight(y2).tickSize(3);
   var yAxisZoomL =  d3.axisLeft(y2).tickSize(3);//.tickFormat(d3.format(".2s"));

   var vbrush = d3.brushY()
                .extent([[0, -(chrWdt+chrHgt)/2-1],[chrWdt, chrWdt/2+chrHgt/2+1]])
                .on("brush", brush);

   window["y0"] = y0;


///get chrs
var mapSId = 2;
var mapTId = 9;



// var myFunct=function(e){return this.indexOf(e)<0;}; 

  // const chruno = getChrJSON('http://192.168.33.10:3100/brapi/v1/maps/'+mapSId +'/positions?pageSize=10000000').then(function(d) { return d;
  //                 }, function(status) {
  //                   alert('Something went wrong.');
  //                 });
  // const chrdos = getChrJSON('http://192.168.33.10:3100/brapi/v1/maps/'+mapTId + '/positions?pageSize=10000000').then(function(d) { return d;
  //                 }, function(status) {
  //                   alert('Something went wrong.');
  //                 });
  const chruno = getChrJSON('http://192.168.33.10:3000/static/images/map2.json').then(function(d) { return d;
                  }, function(status) {
                    alert('Something went wrong.');
                  });
  const chrdos = getChrJSON('http://192.168.33.10:3000/static/images/map9.json').then(function(d) { return d;
                  }, function(status) {
                    alert('Something went wrong.');
                  });
  var line = d3.line();

  Promise.all([
    chruno,
    chrdos
  ])
    .then((values) => {
      const source = values[0].linkageGroups; 
      const target = values[1].linkageGroups;  


      // Construct links array
      var s,t; 
      var IdMarkers = getCommonColumn(source,target,"markerDbId"); 
      var datal = [];
      
      for (var i = 0; i < IdMarkers.length; i++) {  
        s = source.filter( function(char) { if (char.markerDbId===IdMarkers[i]) { return char; } });
        t = target.filter( function(char) { if (char.markerDbId===IdMarkers[i])  return char; });

        for (var si = 0; si < s.length; si++) {   
          for (var ti = 0; ti < t.length; ti++) { // if (s[si].linkageGroup<6 && t[ti].linkageGroup<6 ) {
             datal.push({
                    "chrs": s[si].linkageGroup, 
                    "s": (+s[si].position),  
                    "chrt": t[ti].linkageGroup, 
                    "t": (+t[ti].position), 
                    "markerDbId": IdMarkers[i],
                    "names": "lmk" + mapSId + "_" + s[si].linkageGroup  + "-" + IdMarkers[i],
                    "namet": "lmk" + mapTId + "_" + t[ti].linkageGroup  + "-" + IdMarkers[i],
                    "nameLink": "l_"+IdMarkers[i]
              });
            }
          } //}
        }


      // Draw Chrs and markers

      const forZoom = 1, x0 =0; //-width/8;
      const comp=1;
      var list = [1,2,3]; //,4,5,6,7,8,9,10,11,12,13,14,15];

      // Draw each chr
      drawSetChr(source,svg,list,x0,y0,1,forZoom,comp, mapSId);
      drawSetChr(target,svg,list,x0,y0,-1,forZoom,comp, mapTId);

      connectElements(svg,datal);


    });




 </script>
</main>

<& ../site/footer.mas &>

</body>
</html>
