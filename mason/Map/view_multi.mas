<%args>
$mapSId => ()
$mapTId => ()
$dbhost => ()
</%args>

<& ../site/header.mas &>
<style type="text/css">
  path {
  fill:none;
  /*stroke:black;*/
}
</style>
<main role="main" class="container">
    <br><br><br><br>

 <div>
    <table class="table">
      <tr> 
        <th colspan="2"><h4 id="tittle2" width="50%" align="center" style="color:navy;"></h4></th>
        <th colspan="2"><h4 id="tittle1" width="50%" align="center" style="color:navy;"></h4></th>
      </tr>
    </table>
  </div>

<br>
<br>
<div id="container" class="svg-container">
    <polygon id="poligono" points="" style="fill:none; stroke:#003300; stroke-width:3;"></polygon>
</div>

 <script>
   
   var mapSId =  '<% $mapSId %>';
   var mapTId =  '<% $mapTId %>';
   const dbhost =  '<% $dbhost %>';

   const width = 800,
       height = 800, 
       isLinear = 0;

   var svg = d3.select("div#container").append("svg")
              .attr("class", "svg-content")
              .attr("viewBox", "0 0 " + width + " " + height ) 
              .attr("preserveAspectRatio", "xMinYMid meet")
              .attr("id", "matrixSVG");


   svg.select("#brushid").remove();

   var n=1, 
       nm= n+4 ; // # de chr added to not start from 0 grades 

   // Setting Global variables
   var radius = width /3 ,
       chrWdt = (radius / (n*1.6) > 40) ? 40: radius / (n*1.6)  ,
       chrHgt = radius * Math.sin(radians(180 / (nm)))-2.5*(radius/(nm)); 
  
   var y0 = radius * 0.5; 
   var y1 = d3.scaleLinear().range([-(chrWdt+chrHgt)/2, (chrWdt + chrHgt)/2]);
   var y2 = d3.scaleLinear().range([-chrWdt-chrHgt/2, chrWdt + chrHgt/2]); // Use - chwidth to draw circles in the borders
   var yAxis = d3.axisRight(y1).tickSize(3).ticks(3).tickFormat(d3.format(".2s"));
   var yAxisZoom = d3.axisLeft(y2).tickSize(3).ticks(3).tickFormat(d3.format(".2s"));
   var yAxisL =  d3.axisLeft(y1).tickSize(2).ticks(3);//.tickFormat(d3.format(".2s"));
   var yAxisR =  d3.axisRight(y1).tickSize(2).ticks(3);//.tickFormat(d3.format(".2s"));
   var yAxisZoomR =  d3.axisRight(y2).tickSize(3);
   var yAxisZoomL =  d3.axisLeft(y2).tickSize(3);//.tickFormat(d3.format(".2s"));

   var vbrush = d3.brushY()
                .extent([[0, -(chrWdt+chrHgt)/2-1],[chrWdt, chrWdt/2+chrHgt/2+1]])
                .on("brush", brush);

   window["y0"] = y0;
   var line = d3.line();

   $('#ballsWaveG').show();

  const chrLeft = getChrJSON(dbhost,mapSId).then(function(d) { return d;
                }, function(status) {
                alert('Something went wrong.');
                });
  const chrRight= getChrJSON(dbhost,mapTId).then(function(d) { return d;
                }, function(status) {
                alert('Something went wrong.');
                });
  
  Promise.all([ chrLeft, chrRight ])
    .then((values) => {

      if (values[0] && values[1]){
        document.getElementById('tittle1').innerHTML = values[0].result.name;
        document.getElementById('tittle2').innerHTML = values[1].result.name;
        const source = fillArray(values[0]); 
        const target = fillArray(values[1]);  

        var chrListSource = unique(source.list);
        var chrListTarget = unique(target.list);
        var unit1 = values[0].result.unit;
        var unit2 = values[1].result.unit;

        n =  (chrListSource.length >= chrListTarget.length) ? chrListSource.length : chrListTarget.length;
        nm= n+4 ; // # de chr added to not start from 0 grades 

         // Setting Global variables
        radius = width /3 ,
        chrWdt = (radius / (n*1.6) > 40) ? 40: radius / (n*1.6)  ,
        chrHgt = radius * Math.sin(radians(180 / (nm)))-2.5*(radius/(nm)); 
    
        y0 = radius * 0.5; 
        y1 = d3.scaleLinear().range([-(chrWdt+chrHgt)/2, (chrWdt + chrHgt)/2]);
        y2 = d3.scaleLinear().range([-chrWdt-chrHgt/2, chrWdt + chrHgt/2]); // Use - chwidth to draw circles in the borders
        yAxis = d3.axisRight(y1).tickSize(3).ticks(3).tickFormat(d3.format(".2s"));
        yAxisZoom = d3.axisLeft(y2).tickSize(3).ticks(3).tickFormat(d3.format(".2s"));
        yAxisL =  d3.axisLeft(y1).tickSize(1).ticks(3);//.tickFormat(d3.format(".2s"));
        yAxisR =  d3.axisRight(y1).tickSize(1).ticks(3);//.tickFormat(d3.format(".2s"));
        yAxisZoomR =  d3.axisRight(y2).tickSize(3);
        yAxisZoomL =  d3.axisLeft(y2).tickSize(3);//.tickFormat(d3.format(".2s"));

        vbrush = d3.brushY()
                    .extent([[0, -(chrWdt+chrHgt)/2-1],[chrWdt, chrWdt/2+chrHgt/2+1]])
                    .on("brush", brush);

        window["y0"] = y0;

        // Construct links array
        var s,t;    
        var dataLinks=  getLinksdata(source.data,target.data);

        // Draw Chrs and markers
        const forZoom = 0, x0 =0;
        const comp=true;

        // Draw each chr
        drawSetChr(source.data,svg,chrListSource,x0,y0,1,forZoom,comp, mapSId, unit1, chrListSource);
        drawSetChr(target.data,svg,chrListTarget,x0,y0,-1,forZoom,comp, mapTId, unit2, chrListTarget);

        connectElements(svg,dataLinks);

        $('#ballsWaveG').hide();
      }
      else{
        alert('Something went wrong. Map id not valid !');
      }
    });



 function getLinksdata (sale1,sale2){
      // Construct links array
      var s,t; 
      var IdMarkers = getCommonColumn(sale1,sale2,"markerDbId"); 

      var datal = [];
      
      for (var i = 0; i < IdMarkers.length; i++) {  
        s = sale1.filter( function(char) { if (char.markerDbId===IdMarkers[i]) { return char; } });
        t = sale2.filter( function(char) { if (char.markerDbId===IdMarkers[i])  return char; });

        for (var si = 0; si < s.length; si++) {   
          for (var ti = 0; ti < t.length; ti++) { // if (s[si].linkageGroup<6 && t[ti].linkageGroup<6 ) {
             datal.push({
                    "chrs": s[si].linkageGroup, 
                    "s": (+s[si].position),  
                    "chrt": t[ti].linkageGroup, 
                    "t": (+t[ti].position), 
                    "markerDbId": IdMarkers[i],
                    "names": "lmk" + mapSId + "_" + s[si].linkageGroup  + "-" + IdMarkers[i],
                    "namet": "lmk" + mapTId + "_" + t[ti].linkageGroup  + "-" + IdMarkers[i],
                    "nameLink": "l_s"+ s[si].linkageGroup + "_t" + t[ti].linkageGroup + "_" +  IdMarkers[i]
              });
            }
          } //}
        }
        return datal
}

 </script>
</main>

<& ../site/footer.mas &>

</body>
</html>
