<%args>
$input_map => ()
$input_chr => ()
$dbhost => ()
$list => ()
</%args>
<& ../site/header.mas &>

  <main role="main" class="container">
    <br><br>
    <h3 class="my-4" id="tittle" align="center" style="color:navy;"><small></small></h3>

    <form id="form1" class="form-horizontal">
      <div class="table-responsive">
        <table class="table">
          <tr>
            <th align="center" width="50%">
              <a id="before" class="btn btn-primary" href="#" onclick="nChr=aList[aList.indexOf(nChr)-1]; selectMap(map,nChr,aList);"></a>
              </th>
            <th align="center" width="50%">
            <a id="after"  class="btn btn-primary" href="#" onclick="nChr=aList[aList.indexOf(nChr)+1]; selectMap(map,nChr,aList);"></a>
            </th>
          </tr>
        </table>
      </div>
    </form>

    <div id="container" class="svg-container">
      <polygon id="poligono" points="" style="fill:none; stroke:#003300; stroke-width:3;"></polygon>
    </div>

    <script>
      /* Declare variables */
      var nChr = '<% $input_chr %>';
      var map =  '<% $input_map %>';
      var brApiSite = '<% $dbhost %>';
      var list = '<% $list %>';
      var aList = list.split(',');

      $('#ballsWaveG').show();

      var width = 800; 
      var height = 500; 
      var n =1;
      var isLinear = 1, axisSide=-1, chrZSide = 1;

      var svg = d3.select("div#container").append("svg")
                  .attr("class", "svg-content")
                  .attr("viewBox", "0 0 " + width + " " + height ) 
                  .attr("preserveAspectRatio", "xMinYMin meet")
                  .attr("id", "matrixSVG");

      var radius = width/4,
          originX= radius,
          originY= 130,
          chrWdt = 35, 
          chrHgt = 200, 
          y1 = d3.scaleLinear().range([-chrHgt/2,chrHgt/2]), 
          y2 = d3.scaleLinear().range([-chrWdt-chrHgt/2,chrHgt/2 + chrWdt]);  // Use - chwidth to draw circles in the borders

      var yAxisL =  d3.axisLeft(y1).tickSize(2).ticks(5);
      var yAxisR =  d3.axisRight(y1).tickSize(2).ticks(5);
      var yAxisZoomR =  d3.axisRight(y2).tickSize(3);
      var yAxisZoomL =  d3.axisLeft(y2).tickSize(3);

      var vbrush = d3.brushY()
                  .extent([[0, -chrHgt/2], [chrWdt, chrHgt/2]])
                  .on("end", brush);  

      /* Draw chromosomes */

      svg.select("#brushid").remove();




      /* Supporting functions */

      function distToZoom(){
        return  chrWdt * 3 + isLinear*200; 
      }

      function yAxisSide(axisSide){
        if (axisSide==1) return  yAxisR;
        else return  yAxisL;
      }

      function yAxisZoomSide(axisSide){
        if (axisSide==-1) return  yAxisZoomR;
        else return  yAxisZoomL;
      }

      function nMap(){
        return map;
      }

      function getmarkerid(){
        var id = '';
        var name = document.getElementById('searchmk').value;
        svg.selectAll("line").style("stroke-width", function(d){ if (d.marker_name == name) id = d.marker_name;  return "2"});

        return id;
      }

      function selectMap(map, nchr,aList) {
        
        var indexofChr = aList.indexOf(nChr);

        if (indexofChr>0){  document.getElementById('before').innerHTML = "< Chr " + (aList[indexofChr-1]); } else { document.getElementById('before').style.display = 'none'; }
        if (indexofChr<aList.length-1){  document.getElementById('after').innerHTML = "Chr " + (aList[indexofChr+1]) + " >"; } else { document.getElementById('after').style.display = 'none'; }

        svg.selectAll("*").remove();

        const chrData = getMapChrJSON(brApiSite,map,nchr).then(function(d) { return d;
                    }, function(status) {
                    alert('Something went wrong.');
                    });
        const mapName = getMapJSON(brApiSite,map).then(function(d) { return d;
                    }, function(status) {
                    alert('Something went wrong.');
                    });

        Promise.all([
          chrData, mapName
        ])
        .then((values) => {
          if (values[0]){
            const resp = values[0]; 
            const respName = values[1];
            var result = fillFilterArray(resp,nchr);
            var data = result.data;
            var unit = resp.result.unit;
            var comp=false;

            document.getElementById("tittle").innerHTML = respName.result.mapName; 

            // Setting layout
            var radius = 0;
            var y0 = chrWdt*3;
            var forZoom = 1;

            // Draw each chr
            chromosome(data, svg, chrWdt, chrHgt, 0, radius, y0, map, nchr, forZoom,isLinear,n,originX,originY,chrZSide,axisSide,comp,unit,nchr);

            }
            $('#ballsWaveG').hide();

          });

          document.getElementById("dataSource1").value = brApiSite;
          document.getElementById("dataSource2").value = brApiSite;
          document.getElementById("mapSId").value = map;
          document.getElementById("nChrS").value = nchr;
      }

      function checkrange(){

          var min = +(document.getElementById('minrange').value); 
          var max = +(document.getElementById('maxrange').value); 

          if(min == max){
            alert('Please insert different numbers');
          } else {    
            if (min.between(y1.domain()) && max.between(y1.domain())) {
                brush();
            } else{
                alert('Please insert a number between: ' + y1.domain());
            }
          }
      }

      function goComparative(){
        var mapTId = document.getElementById('mapTId').value;
        var nchT = document.getElementById('nChrT').value;
        if (mapTId != "" && nchT != ""){
            document.getElementById("FormCompare").submit();
        } else {
            alert("Select a map and chromosome number.");
        }
      }


      function getMapList() {

        var request = new XMLHttpRequest();

        request.open('GET', brApiSite + '/brapi/v1/maps/');

        request.onreadystatechange = function() {

          if (this.readyState === 4) {

            var resp = JSON.parse(this.responseText).result.data;

            for (var  i = 0; i<resp.length; i++){
                var select = document.getElementById("mapTId");
                select.options[select.options.length] = new Option(resp[i].mapName, resp[i].mapDbId);

           }
          }
        }
        request.send();
      }

    getMapList();

    </script>
    <div class="form-group">
      <form>
        <div class="form-row">
          <div class="form-group col-md-6">
            <label for="inputEmail4">Search by marker name</label>
            <input type="text" class="form-control" id="searchmk" placeholder="Marker name">
          </div>
          <div class="form-group col-md-12">
              <input type="button" class="btn btn-primary" value="Search" onclick="searchmarker(getmarkerid(),nChr);">
          </div>
        </div>
      </form>
      <form>
        <div class="form-row">
          <div class="form-group col-md-6">
            <label for="inputEmail4">Position from</label>
            <input type="numerical" class="form-control" id="minrange" placeholder="Number">
          </div>
          <div class="form-group col-md-6">
            <label for="inputPassword4">To</label>
            <input type="numerical" class="form-control" id="maxrange" placeholder="Number">
          </div>
          <div class="form-group col-md-6">
            <input type="button" class="btn btn-primary" value="View" onclick="checkrange();">
          </div>
        </div>
      </form>

      <form id="FormCompare" action="/Map/view_comp" method="post">
        <div class="form-row">
          <div class="form-group col-md-6">
            <label for="mapTId">Compare to map</label>
                    <select  class="form-control" id="mapTId" name="mapTId">
                      <option value=""></option>
                    </select>
          </div>
          <div class="form-group col-md-6">
            <label for="nChrT">Chr</label>
                  <input class="form-control" id="nChrT" name="nChrT">
          </div><div>
            <input class="form-control" name='dataSource1' id='dataSource1'/>
            <input class="form-control" name='dataSource2' id='dataSource2' /> 
            <input class="form-control" name='mapSId' id='mapSId' > 
            <input class="form-control" name='nChrS' id='nChrS' /> 
          </div>
          <div class="form-group col-md-6">
            <input type="button" class="btn btn-primary" value="Compare" onclick="goComparative();">
          </div>
        </div>
      </form>

    </div>
<br><br>
</main>
<script type="text/javascript">
  selectMap(map,nChr,aList);
</script>
<& ../site/footer.mas &>

</body>
</html>
